var egret = window.egret;! function (t) {
    function e(t) {
        function e(t, r, i) {
            if ("undefined" == typeof t && (t = e.DEFAULT_CAPACITY), "undefined" == typeof r && (r = e.DEFAULT_ENDIAN), "undefined" == typeof i && (i = e.DEFAULT_NOASSERT), !i) {
                if (t |= 0, 0 > t) throw RangeError("Illegal capacity");
                r = !!r, i = !!i
            }
            this.buffer = 0 === t ? o : new ArrayBuffer(t), this.view = 0 === t ? null : new DataView(this.buffer), this.offset = 0, this.markedOffset = -1, this.limit = t, this.littleEndian = "undefined" != typeof r ? !!r : !1, this.noAssert = !!i
        }

        function r(t) {
            var e = 0;
            return function () {
                return e < t.length ? t.charCodeAt(e++) : null
            }
        }

        function n() {
            var t = [],
                e = [];
            return function () {
                return 0 === arguments.length ? e.join("") + s.apply(String, t) : (1024 < t.length + arguments.length && (e.push(s.apply(String, t)), t.length = 0), void Array.prototype.push.apply(t, arguments))
            }
        }
        e.VERSION = "3.5.4", e.LITTLE_ENDIAN = !0, e.BIG_ENDIAN = !1, e.DEFAULT_CAPACITY = 16, e.DEFAULT_ENDIAN = e.BIG_ENDIAN, e.DEFAULT_NOASSERT = !1, e.Long = t || null;
        var f = e.prototype,
            o = new ArrayBuffer(0),
            s = String.fromCharCode;
        e.allocate = function (t, r, i) {
            return new e(t, r, i)
        }, e.concat = function (t, r, i, n) {
            ("boolean" == typeof r || "string" != typeof r) && (n = i, i = r, r = void 0);
            for (var f, o = 0, s = 0, h = t.length; h > s; ++s) e.isByteBuffer(t[s]) || (t[s] = e.wrap(t[s], r)), f = t[s].limit - t[s].offset, f > 0 && (o += f);
            if (0 === o) return new e(0, i, n);
            for (r = new e(o, i, n), n = new Uint8Array(r.buffer), s = 0; h > s;) i = t[s++], f = i.limit - i.offset, 0 >= f || (n.set(new Uint8Array(i.buffer).subarray(i.offset, i.limit), r.offset), r.offset += f);
            return r.limit = r.offset, r.offset = 0, r
        }, e.isByteBuffer = function (t) {
            return !0 === (t && t instanceof e)
        }, e.type = function () {
            return ArrayBuffer
        }, e.wrap = function (t, r, n, o) {
            if ("string" != typeof r && (o = n, n = r, r = void 0), "string" == typeof t) switch ("undefined" == typeof r && (r = "utf8"), r) {
                case "base64":
                    return e.fromBase64(t, n);
                case "hex":
                    return e.fromHex(t, n);
                case "binary":
                    return e.fromBinary(t, n);
                case "utf8":
                    return e.fromUTF8(t, n);
                case "debug":
                    return e.fromDebug(t, n);
                default:
                    throw Error("Unsupported encoding: " + r)
            }
            if (null === t || "object" != typeof t) throw TypeError("Illegal buffer");
            if (e.isByteBuffer(t)) return r = f.clone.call(t), r.markedOffset = -1, r;
            if (t instanceof Uint8Array) r = new e(0, n, o), 0 < t.length && (r.buffer = t.buffer, r.offset = t.byteOffset, r.limit = t.byteOffset + t.length, r.view = 0 < t.length ? new DataView(t.buffer) : null);
            else if (t instanceof ArrayBuffer) r = new e(0, n, o), 0 < t.byteLength && (r.buffer = t, r.offset = 0, r.limit = t.byteLength, r.view = 0 < t.byteLength ? new DataView(t) : null);
            else {
                if ("[object Array]" !== Object.prototype.toString.call(t)) throw TypeError("Illegal buffer");
                for (r = new e(t.length, n, o), r.limit = t.length, i = 0; i < t.length; ++i) r.view.setUint8(i, t[i])
            }
            return r
        }, f.writeInt8 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 1;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setInt8(e - 1, t), r && (this.offset += 1), this
        }, f.writeByte = f.writeInt8, f.readInt8 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+1) <= " + this.buffer.byteLength)
            }
            return t = this.view.getInt8(t), e && (this.offset += 1), t
        }, f.readByte = f.readInt8, f.writeUint8 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 1;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setUint8(e - 1, t), r && (this.offset += 1), this
        }, f.readUint8 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+1) <= " + this.buffer.byteLength)
            }
            return t = this.view.getUint8(t), e && (this.offset += 1), t
        }, f.writeInt16 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 2;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setInt16(e - 2, t, this.littleEndian), r && (this.offset += 2), this
        }, f.writeShort = f.writeInt16, f.readInt16 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+2) <= " + this.buffer.byteLength)
            }
            return t = this.view.getInt16(t, this.littleEndian), e && (this.offset += 2), t
        }, f.readShort = f.readInt16, f.writeUint16 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 2;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setUint16(e - 2, t, this.littleEndian), r && (this.offset += 2), this
        }, f.readUint16 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+2) <= " + this.buffer.byteLength)
            }
            return t = this.view.getUint16(t, this.littleEndian), e && (this.offset += 2), t
        }, f.writeInt32 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 4;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setInt32(e - 4, t, this.littleEndian), r && (this.offset += 4), this
        }, f.writeInt = f.writeInt32, f.readInt32 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+4) <= " + this.buffer.byteLength)
            }
            return t = this.view.getInt32(t, this.littleEndian), e && (this.offset += 4), t
        }, f.readInt = f.readInt32, f.writeUint32 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 4;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setUint32(e - 4, t, this.littleEndian), r && (this.offset += 4), this
        }, f.readUint32 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+4) <= " + this.buffer.byteLength)
            }
            return t = this.view.getUint32(t, this.littleEndian), e && (this.offset += 4), t
        }, t && (f.writeInt64 = function (e, r) {
            var i = "undefined" == typeof r;
            if (i && (r = this.offset), !this.noAssert) {
                if ("number" == typeof e) e = t.fromNumber(e);
                else if (!(e && e instanceof t)) throw TypeError("Illegal value: " + e + " (not an integer or Long)");
                if ("number" != typeof r || 0 !== r % 1) throw TypeError("Illegal offset: " + r + " (not an integer)");
                if (r >>>= 0, 0 > r || r + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + r + " (+0) <= " + this.buffer.byteLength)
            }
            "number" == typeof e && (e = t.fromNumber(e)), r += 8;
            var n = this.buffer.byteLength;
            return r > n && this.resize((n *= 2) > r ? n : r), r -= 8, this.littleEndian ? (this.view.setInt32(r, e.low, !0), this.view.setInt32(r + 4, e.high, !0)) : (this.view.setInt32(r, e.high, !1), this.view.setInt32(r + 4, e.low, !1)), i && (this.offset += 8), this
        }, f.writeLong = f.writeInt64, f.readInt64 = function (e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+8) <= " + this.buffer.byteLength)
            }
            return e = this.littleEndian ? new t(this.view.getInt32(e, !0), this.view.getInt32(e + 4, !0), !1) : new t(this.view.getInt32(e + 4, !1), this.view.getInt32(e, !1), !1), r && (this.offset += 8), e
        }, f.readLong = f.readInt64, f.writeUint64 = function (e, r) {
            var i = "undefined" == typeof r;
            if (i && (r = this.offset), !this.noAssert) {
                if ("number" == typeof e) e = t.fromNumber(e);
                else if (!(e && e instanceof t)) throw TypeError("Illegal value: " + e + " (not an integer or Long)");
                if ("number" != typeof r || 0 !== r % 1) throw TypeError("Illegal offset: " + r + " (not an integer)");
                if (r >>>= 0, 0 > r || r + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + r + " (+0) <= " + this.buffer.byteLength)
            }
            "number" == typeof e && (e = t.fromNumber(e)), r += 8;
            var n = this.buffer.byteLength;
            return r > n && this.resize((n *= 2) > r ? n : r), r -= 8, this.littleEndian ? (this.view.setInt32(r, e.low, !0), this.view.setInt32(r + 4, e.high, !0)) : (this.view.setInt32(r, e.high, !1), this.view.setInt32(r + 4, e.low, !1)), i && (this.offset += 8), this
        }, f.readUint64 = function (e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+8) <= " + this.buffer.byteLength)
            }
            return e = this.littleEndian ? new t(this.view.getInt32(e, !0), this.view.getInt32(e + 4, !0), !0) : new t(this.view.getInt32(e + 4, !1), this.view.getInt32(e, !1), !0), r && (this.offset += 8), e
        }), f.writeFloat32 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t) throw TypeError("Illegal value: " + t + " (not a number)");
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 4;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setFloat32(e - 4, t, this.littleEndian), r && (this.offset += 4), this
        }, f.writeFloat = f.writeFloat32, f.readFloat32 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+4) <= " + this.buffer.byteLength)
            }
            return t = this.view.getFloat32(t, this.littleEndian), e && (this.offset += 4), t
        }, f.readFloat = f.readFloat32, f.writeFloat64 = function (t, e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof t) throw TypeError("Illegal value: " + t + " (not a number)");
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            e += 8;
            var i = this.buffer.byteLength;
            return e > i && this.resize((i *= 2) > e ? i : e), this.view.setFloat64(e - 8, t, this.littleEndian), r && (this.offset += 8), this
        }, f.writeDouble = f.writeFloat64, f.readFloat64 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+8) <= " + this.buffer.byteLength)
            }
            return t = this.view.getFloat64(t, this.littleEndian), e && (this.offset += 8), t
        }, f.readDouble = f.readFloat64, e.MAX_VARINT32_BYTES = 5, e.calculateVarint32 = function (t) {
            return t >>>= 0, 128 > t ? 1 : 16384 > t ? 2 : 2097152 > t ? 3 : 268435456 > t ? 4 : 5
        }, e.zigZagEncode32 = function (t) {
            return ((t |= 0) << 1 ^ t >> 31) >>> 0
        }, e.zigZagDecode32 = function (t) {
            return t >>> 1 ^ -(1 & t) | 0
        }, f.writeVarint32 = function (t, r) {
            var i = "undefined" == typeof r;
            if (i && (r = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof r || 0 !== r % 1) throw TypeError("Illegal offset: " + r + " (not an integer)");
                if (r >>>= 0, 0 > r || r + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + r + " (+0) <= " + this.buffer.byteLength)
            }
            var n = e.calculateVarint32(t);
            r += n;
            var f = this.buffer.byteLength;
            return r > f && this.resize((f *= 2) > r ? f : r), r -= n, this.view.setUint8(r, n = 128 | t), t >>>= 0, t >= 128 ? (n = t >> 7 | 128, this.view.setUint8(r + 1, n), t >= 16384 ? (n = t >> 14 | 128, this.view.setUint8(r + 2, n), t >= 2097152 ? (n = t >> 21 | 128, this.view.setUint8(r + 3, n), t >= 268435456 ? (this.view.setUint8(r + 4, t >> 28 & 15), n = 5) : (this.view.setUint8(r + 3, 127 & n), n = 4)) : (this.view.setUint8(r + 2, 127 & n), n = 3)) : (this.view.setUint8(r + 1, 127 & n), n = 2)) : (this.view.setUint8(r, 127 & n), n = 1), i ? (this.offset += n, this) : n
        }, f.writeVarint32ZigZag = function (t, r) {
            return this.writeVarint32(e.zigZagEncode32(t), r)
        }, f.readVarint32 = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+1) <= " + this.buffer.byteLength)
            }
            var r, i = 0,
                n = 0;
            do {
                if (r = t + i, !this.noAssert && r > this.limit) throw t = Error("Truncated"), t.truncated = !0, t;
                r = this.view.getUint8(r), 5 > i && (n |= (127 & r) << 7 * i >>> 0), ++i
            } while (128 === (128 & r));
            return n |= 0, e ? (this.offset += i, n) : {
                value: n,
                length: i
            }
        }, f.readVarint32ZigZag = function (t) {
            return t = this.readVarint32(t), "object" == typeof t ? t.value = e.zigZagDecode32(t.value) : t = e.zigZagDecode32(t), t
        }, t && (e.MAX_VARINT64_BYTES = 10, e.calculateVarint64 = function (e) {
            "number" == typeof e && (e = t.fromNumber(e));
            var r = e.toInt() >>> 0,
                i = e.shiftRightUnsigned(28).toInt() >>> 0;
            return e = e.shiftRightUnsigned(56).toInt() >>> 0, 0 == e ? 0 == i ? 16384 > r ? 128 > r ? 1 : 2 : 2097152 > r ? 3 : 4 : 16384 > i ? 128 > i ? 5 : 6 : 2097152 > i ? 7 : 8 : 128 > e ? 9 : 10
        }, e.zigZagEncode64 = function (e) {
            return "number" == typeof e ? e = t.fromNumber(e, !1) : !1 !== e.unsigned && (e = e.toSigned()), e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned()
        }, e.zigZagDecode64 = function (e) {
            return "number" == typeof e ? e = t.fromNumber(e, !1) : !1 !== e.unsigned && (e = e.toSigned()), e.shiftRightUnsigned(1).xor(e.and(t.ONE).toSigned().negate()).toSigned()
        }, f.writeVarint64 = function (r, i) {
            var n = "undefined" == typeof i;
            if (n && (i = this.offset), !this.noAssert) {
                if ("number" == typeof r) r = t.fromNumber(r);
                else if (!(r && r instanceof t)) throw TypeError("Illegal value: " + r + " (not an integer or Long)");
                if ("number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                if (i >>>= 0, 0 > i || i + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength)
            }
            "number" == typeof r ? r = t.fromNumber(r, !1) : !1 !== r.unsigned && (r = r.toSigned());
            var f = e.calculateVarint64(r),
                o = r.toInt() >>> 0,
                s = r.shiftRightUnsigned(28).toInt() >>> 0,
                h = r.shiftRightUnsigned(56).toInt() >>> 0;
            i += f;
            var a = this.buffer.byteLength;
            switch (i > a && this.resize((a *= 2) > i ? a : i), i -= f, f) {
                case 10:
                    this.view.setUint8(i + 9, h >>> 7 & 1);
                case 9:
                    this.view.setUint8(i + 8, 9 !== f ? 128 | h : 127 & h);
                case 8:
                    this.view.setUint8(i + 7, 8 !== f ? s >>> 21 | 128 : s >>> 21 & 127);
                case 7:
                    this.view.setUint8(i + 6, 7 !== f ? s >>> 14 | 128 : s >>> 14 & 127);
                case 6:
                    this.view.setUint8(i + 5, 6 !== f ? s >>> 7 | 128 : s >>> 7 & 127);
                case 5:
                    this.view.setUint8(i + 4, 5 !== f ? 128 | s : 127 & s);
                case 4:
                    this.view.setUint8(i + 3, 4 !== f ? o >>> 21 | 128 : o >>> 21 & 127);
                case 3:
                    this.view.setUint8(i + 2, 3 !== f ? o >>> 14 | 128 : o >>> 14 & 127);
                case 2:
                    this.view.setUint8(i + 1, 2 !== f ? o >>> 7 | 128 : o >>> 7 & 127);
                case 1:
                    this.view.setUint8(i, 1 !== f ? 128 | o : 127 & o)
            }
            return n ? (this.offset += f, this) : f
        }, f.writeVarint64ZigZag = function (t, r) {
            return this.writeVarint64(e.zigZagEncode64(t), r)
        }, f.readVarint64 = function (e) {
            var r = "undefined" == typeof e;
            if (r && (e = this.offset), !this.noAssert) {
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+1) <= " + this.buffer.byteLength)
            }
            var i = e,
                n = 0,
                f = 0,
                o = 0,
                s = 0,
                s = this.view.getUint8(e++),
                n = 127 & s;
            if (128 & s && (s = this.view.getUint8(e++), n |= (127 & s) << 7, 128 & s && (s = this.view.getUint8(e++), n |= (127 & s) << 14, 128 & s && (s = this.view.getUint8(e++), n |= (127 & s) << 21, 128 & s && (s = this.view.getUint8(e++), f = 127 & s, 128 & s && (s = this.view.getUint8(e++), f |= (127 & s) << 7, 128 & s && (s = this.view.getUint8(e++), f |= (127 & s) << 14, 128 & s && (s = this.view.getUint8(e++), f |= (127 & s) << 21, 128 & s && (s = this.view.getUint8(e++), o = 127 & s, 128 & s && (s = this.view.getUint8(e++), o |= (127 & s) << 7, 128 & s)))))))))) throw Error("Buffer overrun");
            return n = t.fromBits(n | f << 28, f >>> 4 | o << 24, !1), r ? (this.offset = e, n) : {
                value: n,
                length: e - i
            }
        }, f.readVarint64ZigZag = function (r) {
            return (r = this.readVarint64(r)) && r.value instanceof t ? r.value = e.zigZagDecode64(r.value) : r = e.zigZagDecode64(r), r
        }), f.writeCString = function (t, e) {
            var i = "undefined" == typeof e;
            i && (e = this.offset);
            var n, f = t.length;
            if (!this.noAssert) {
                if ("string" != typeof t) throw TypeError("Illegal str: Not a string");
                for (n = 0; f > n; ++n)
                    if (0 === t.charCodeAt(n)) throw RangeError("Illegal str: Contains NULL-characters");
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            n = e, f = a.a(r(t))[1], e += f + 1;
            var o = this.buffer.byteLength;
            return e > o && this.resize((o *= 2) > e ? o : e), e -= f + 1, a.c(r(t), function (t) {
                this.view.setUint8(e++, t)
            }.bind(this)), this.view.setUint8(e++, 0), i ? (this.offset = e - n, this) : f
        }, f.readCString = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+1) <= " + this.buffer.byteLength)
            }
            var r, i = t,
                f = -1;
            return a.b(function () {
                if (0 === f) return null;
                if (t >= this.limit) throw RangeError("Illegal range: Truncated data, " + t + " < " + this.limit);
                return 0 === (f = this.view.getUint8(t++)) ? null : f
            }.bind(this), r = n(), !0), e ? (this.offset = t, r()) : {
                string: r(),
                length: t - i
            }
        }, f.writeIString = function (t, e) {
            var i = "undefined" == typeof e;
            if (i && (e = this.offset), !this.noAssert) {
                if ("string" != typeof t) throw TypeError("Illegal str: Not a string");
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            var n, f = e;
            n = a.a(r(t), this.noAssert)[1], e += 4 + n;
            var o = this.buffer.byteLength;
            if (e > o && this.resize((o *= 2) > e ? o : e), e -= 4 + n, this.view.setUint32(e, n, this.littleEndian), e += 4, a.c(r(t), function (t) {
                    this.view.setUint8(e++, t)
                }.bind(this)), e !== f + 4 + n) throw RangeError("Illegal range: Truncated data, " + e + " == " + (e + 4 + n));
            return i ? (this.offset = e, this) : e - f
        }, f.readIString = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+4) <= " + this.buffer.byteLength)
            }
            var r = 0,
                i = t,
                r = this.view.getUint32(t, this.littleEndian);
            t += 4;
            var f = t + r;
            return a.b(function () {
                return f > t ? this.view.getUint8(t++) : null
            }.bind(this), r = n(), this.noAssert), r = r(), e ? (this.offset = t, r) : {
                string: r,
                length: t - i
            }
        }, e.METRICS_CHARS = "c", e.METRICS_BYTES = "b", f.writeUTF8String = function (t, e) {
            var i = "undefined" == typeof e;
            if (i && (e = this.offset), !this.noAssert) {
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: " + e + " (not an integer)");
                if (e >>>= 0, 0 > e || e + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength)
            }
            var n, f = e;
            n = a.a(r(t))[1], e += n;
            var o = this.buffer.byteLength;
            return e > o && this.resize((o *= 2) > e ? o : e), e -= n, a.c(r(t), function (t) {
                this.view.setUint8(e++, t)
            }.bind(this)), i ? (this.offset = e, this) : e - f
        }, f.writeString = f.writeUTF8String, e.calculateUTF8Chars = function (t) {
            return a.a(r(t))[0]
        }, e.calculateUTF8Bytes = function (t) {
            return a.a(r(t))[1]
        }, f.readUTF8String = function (t, r, i) {
            "number" == typeof r && (i = r, r = void 0);
            var f = "undefined" == typeof i;
            if (f && (i = this.offset), "undefined" == typeof r && (r = e.METRICS_CHARS), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal length: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                if (i >>>= 0, 0 > i || i + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength)
            }
            var o, s = 0,
                h = i;
            if (r === e.METRICS_CHARS) {
                if (o = n(), a.g(function () {
                        return t > s && i < this.limit ? this.view.getUint8(i++) : null
                    }.bind(this), function (t) {
                        ++s, a.e(t, o)
                    }.bind(this)), s !== t) throw RangeError("Illegal range: Truncated data, " + s + " == " + t);
                return f ? (this.offset = i, o()) : {
                    string: o(),
                    length: i - h
                }
            }
            if (r === e.METRICS_BYTES) {
                if (!this.noAssert) {
                    if ("number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                    if (i >>>= 0, 0 > i || i + t > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+" + t + ") <= " + this.buffer.byteLength)
                }
                var l = i + t;
                if (a.b(function () {
                        return l > i ? this.view.getUint8(i++) : null
                    }.bind(this), o = n(), this.noAssert), i !== l) throw RangeError("Illegal range: Truncated data, " + i + " == " + l);
                return f ? (this.offset = i, o()) : {
                    string: o(),
                    length: i - h
                }
            }
            throw TypeError("Unsupported metrics: " + r)
        }, f.readString = f.readUTF8String, f.writeVString = function (t, i) {
            var n = "undefined" == typeof i;
            if (n && (i = this.offset), !this.noAssert) {
                if ("string" != typeof t) throw TypeError("Illegal str: Not a string");
                if ("number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                if (i >>>= 0, 0 > i || i + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength)
            }
            var f, o, s = i;
            f = a.a(r(t), this.noAssert)[1], o = e.calculateVarint32(f), i += o + f;
            var h = this.buffer.byteLength;
            if (i > h && this.resize((h *= 2) > i ? h : i), i -= o + f, i += this.writeVarint32(f, i), a.c(r(t), function (t) {
                    this.view.setUint8(i++, t)
                }.bind(this)), i !== s + f + o) throw RangeError("Illegal range: Truncated data, " + i + " == " + (i + f + o));
            return n ? (this.offset = i, this) : i - s
        }, f.readVString = function (t) {
            var e = "undefined" == typeof t;
            if (e && (t = this.offset), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+1) <= " + this.buffer.byteLength)
            }
            var r = this.readVarint32(t),
                i = t;
            t += r.length;
            var r = r.value,
                f = t + r,
                r = n();
            return a.b(function () {
                return f > t ? this.view.getUint8(t++) : null
            }.bind(this), r, this.noAssert), r = r(), e ? (this.offset = t, r) : {
                string: r,
                length: t - i
            }
        }, f.append = function (t, r, i) {
            ("number" == typeof r || "string" != typeof r) && (i = r, r = void 0);
            var n = "undefined" == typeof i;
            if (n && (i = this.offset), !this.noAssert) {
                if ("number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                if (i >>>= 0, 0 > i || i + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength)
            }
            if (t instanceof e || (t = e.wrap(t, r)), r = t.limit - t.offset, 0 >= r) return this;
            i += r;
            var f = this.buffer.byteLength;
            return i > f && this.resize((f *= 2) > i ? f : i), new Uint8Array(this.buffer, i - r).set(new Uint8Array(t.buffer).subarray(t.offset, t.limit)), t.offset += r, n && (this.offset += r), this
        }, f.appendTo = function (t, e) {
            return t.append(this, e), this
        }, f.assert = function (t) {
            return this.noAssert = !t, this
        }, f.capacity = function () {
            return this.buffer.byteLength
        }, f.clear = function () {
            return this.offset = 0, this.limit = this.buffer.byteLength, this.markedOffset = -1, this
        }, f.clone = function (t) {
            var r = new e(0, this.littleEndian, this.noAssert);
            return t ? (t = new ArrayBuffer(this.buffer.byteLength), new Uint8Array(t).set(this.buffer), r.buffer = t, r.view = new DataView(t)) : (r.buffer = this.buffer, r.view = this.view), r.offset = this.offset, r.markedOffset = this.markedOffset, r.limit = this.limit, r
        }, f.compact = function (t, e) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof e && (e = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            if (0 === t && e === this.buffer.byteLength) return this;
            var r = e - t;
            if (0 === r) return this.buffer = o, this.view = null, 0 <= this.markedOffset && (this.markedOffset -= t), this.limit = this.offset = 0, this;
            var i = new ArrayBuffer(r);
            return new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(t, e)), this.buffer = i, this.view = new DataView(i), 0 <= this.markedOffset && (this.markedOffset -= t), this.offset = 0, this.limit = r, this
        }, f.copy = function (t, r) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof r && (r = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof r || 0 !== r % 1) throw TypeError("Illegal end: Not an integer");
                if (r >>>= 0, 0 > t || t > r || r > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + r + " <= " + this.buffer.byteLength)
            }
            if (t === r) return new e(0, this.littleEndian, this.noAssert);
            var i = r - t,
                n = new e(i, this.littleEndian, this.noAssert);
            return n.offset = 0, n.limit = i, 0 <= n.markedOffset && (n.markedOffset -= t), this.copyTo(n, 0, t, r), n
        }, f.copyTo = function (t, r, i, n) {
            var f, o;
            if (!this.noAssert && !e.isByteBuffer(t)) throw TypeError("Illegal target: Not a ByteBuffer");
            if (r = (o = "undefined" == typeof r) ? t.offset : 0 | r, i = (f = "undefined" == typeof i) ? this.offset : 0 | i, n = "undefined" == typeof n ? this.limit : 0 | n, 0 > r || r > t.buffer.byteLength) throw RangeError("Illegal target range: 0 <= " + r + " <= " + t.buffer.byteLength);
            if (0 > i || n > this.buffer.byteLength) throw RangeError("Illegal source range: 0 <= " + i + " <= " + this.buffer.byteLength);
            var s = n - i;
            return 0 === s ? t : (t.ensureCapacity(r + s), new Uint8Array(t.buffer).set(new Uint8Array(this.buffer).subarray(i, n), r), f && (this.offset += s), o && (t.offset += s), this)
        }, f.ensureCapacity = function (t) {
            var e = this.buffer.byteLength;
            return t > e ? this.resize((e *= 2) > t ? e : t) : this
        }, f.fill = function (t, e, r) {
            var i = "undefined" == typeof e;
            if (i && (e = this.offset), "string" == typeof t && 0 < t.length && (t = t.charCodeAt(0)), "undefined" == typeof e && (e = this.offset), "undefined" == typeof r && (r = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal value: " + t + " (not an integer)");
                if (t |= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal begin: Not an integer");
                if (e >>>= 0, "number" != typeof r || 0 !== r % 1) throw TypeError("Illegal end: Not an integer");
                if (r >>>= 0, 0 > e || e > r || r > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + e + " <= " + r + " <= " + this.buffer.byteLength)
            }
            if (e >= r) return this;
            for (; r > e;) this.view.setUint8(e++, t);
            return i && (this.offset = e), this
        }, f.flip = function () {
            return this.limit = this.offset, this.offset = 0, this
        }, f.mark = function (t) {
            if (t = "undefined" == typeof t ? this.offset : t, !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal offset: " + t + " (not an integer)");
                if (t >>>= 0, 0 > t || t + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + t + " (+0) <= " + this.buffer.byteLength)
            }
            return this.markedOffset = t, this
        }, f.order = function (t) {
            if (!this.noAssert && "boolean" != typeof t) throw TypeError("Illegal littleEndian: Not a boolean");
            return this.littleEndian = !!t, this
        }, f.LE = function (t) {
            return this.littleEndian = "undefined" != typeof t ? !!t : !0, this
        }, f.BE = function (t) {
            return this.littleEndian = "undefined" != typeof t ? !t : !1, this
        }, f.prepend = function (t, r, i) {
            ("number" == typeof r || "string" != typeof r) && (i = r, r = void 0);
            var n = "undefined" == typeof i;
            if (n && (i = this.offset), !this.noAssert) {
                if ("number" != typeof i || 0 !== i % 1) throw TypeError("Illegal offset: " + i + " (not an integer)");
                if (i >>>= 0, 0 > i || i + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength)
            }
            if (t instanceof e || (t = e.wrap(t, r)), r = t.limit - t.offset, 0 >= r) return this;
            var f, o = r - i;
            if (o > 0) {
                var s = new ArrayBuffer(this.buffer.byteLength + o);
                f = new Uint8Array(s), f.set(new Uint8Array(this.buffer).subarray(i, this.buffer.byteLength), r), this.buffer = s, this.view = new DataView(s), this.offset += o, 0 <= this.markedOffset && (this.markedOffset += o), this.limit += o, i += o
            } else f = new Uint8Array(this.buffer);
            return f.set(new Uint8Array(t.buffer).subarray(t.offset, t.limit), i - r), t.offset = t.limit, n && (this.offset -= r), this
        }, f.prependTo = function (t, e) {
            return t.prepend(this, e), this
        }, f.printDebug = function (t) {
            "function" != typeof t && (t = console.log.bind(console)), t(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(!0))
        }, f.remaining = function () {
            return this.limit - this.offset
        }, f.reset = function () {
            return 0 <= this.markedOffset ? (this.offset = this.markedOffset, this.markedOffset = -1) : this.offset = 0, this
        }, f.resize = function (t) {
            if (!this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal capacity: " + t + " (not an integer)");
                if (t |= 0, 0 > t) throw RangeError("Illegal capacity: 0 <= " + t)
            }
            return this.buffer.byteLength < t && (t = new ArrayBuffer(t), new Uint8Array(t).set(new Uint8Array(this.buffer)), this.buffer = t, this.view = new DataView(t)), this
        }, f.reverse = function (t, e) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof e && (e = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            return t === e ? this : (Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(t, e)), this.view = new DataView(this.buffer), this)
        }, f.skip = function (t) {
            if (!this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal length: " + t + " (not an integer)");
                t |= 0
            }
            var e = this.offset + t;
            if (!this.noAssert && (0 > e || e > this.buffer.byteLength)) throw RangeError("Illegal length: 0 <= " + this.offset + " + " + t + " <= " + this.buffer.byteLength);
            return this.offset = e, this
        }, f.slice = function (t, e) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof e && (e = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            var r = this.clone();
            return r.offset = t, r.limit = e, r
        }, f.toBuffer = function (t) {
            var e = this.offset,
                r = this.limit;
            if (e > r) var i = e,
                e = r,
                r = i;
            if (!this.noAssert) {
                if ("number" != typeof e || 0 !== e % 1) throw TypeError("Illegal offset: Not an integer");
                if (e >>>= 0, "number" != typeof r || 0 !== r % 1) throw TypeError("Illegal limit: Not an integer");
                if (r >>>= 0, 0 > e || e > r || r > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + e + " <= " + r + " <= " + this.buffer.byteLength)
            }
            return t || 0 !== e || r !== this.buffer.byteLength ? e === r ? o : (t = new ArrayBuffer(r - e), new Uint8Array(t).set(new Uint8Array(this.buffer).subarray(e, r), 0), t) : this.buffer
        }, f.toArrayBuffer = f.toBuffer, f.toString = function (t, e, r) {
            if ("undefined" == typeof t) return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
            switch ("number" == typeof t && (r = e = t = "utf8"), t) {
                case "utf8":
                    return this.toUTF8(e, r);
                case "base64":
                    return this.toBase64(e, r);
                case "hex":
                    return this.toHex(e, r);
                case "binary":
                    return this.toBinary(e, r);
                case "debug":
                    return this.toDebug();
                case "columns":
                    return this.m();
                default:
                    throw Error("Unsupported encoding: " + t)
            }
        };
        var h = function () {
            for (var t = {}, e = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47], r = [], i = 0, n = e.length; n > i; ++i) r[e[i]] = i;
            return t.i = function (t, r) {
                for (var i, n; null !== (i = t());) r(e[i >> 2 & 63]), n = (3 & i) << 4, null !== (i = t()) ? (n |= i >> 4 & 15, r(e[63 & (n | i >> 4 & 15)]), n = (15 & i) << 2, null !== (i = t()) ? (r(e[63 & (n | i >> 6 & 3)]), r(e[63 & i])) : (r(e[63 & n]), r(61))) : (r(e[63 & n]), r(61), r(61))
            }, t.h = function (t, e) {
                function i(t) {
                    throw Error("Illegal character code: " + t)
                }
                for (var n, f, o; null !== (n = t());)
                    if (f = r[n], "undefined" == typeof f && i(n), null !== (n = t()) && (o = r[n], "undefined" == typeof o && i(n), e(f << 2 >>> 0 | (48 & o) >> 4), null !== (n = t()))) {
                        if (f = r[n], "undefined" == typeof f) {
                            if (61 === n) break;
                            i(n)
                        }
                        if (e((15 & o) << 4 >>> 0 | (60 & f) >> 2), null !== (n = t())) {
                            if (o = r[n], "undefined" == typeof o) {
                                if (61 === n) break;
                                i(n)
                            }
                            e((3 & f) << 6 >>> 0 | o)
                        }
                    }
            }, t.test = function (t) {
                return /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(t)
            }, t
        }();
        f.toBase64 = function (t, e) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof e && (e = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            var r;
            return h.i(function () {
                return e > t ? this.view.getUint8(t++) : null
            }.bind(this), r = n()), r()
        }, e.fromBase64 = function (t, i, n) {
            if (!n) {
                if ("string" != typeof t) throw TypeError("Illegal str: Not a string");
                if (0 !== t.length % 4) throw TypeError("Illegal str: Length not a multiple of 4")
            }
            var f = new e(t.length / 4 * 3, i, n),
                o = 0;
            return h.h(r(t), function (t) {
                f.view.setUint8(o++, t)
            }), f.limit = o, f
        }, e.btoa = function (t) {
            return e.fromBinary(t).toBase64()
        }, e.atob = function (t) {
            return e.fromBase64(t).toBinary()
        }, f.toBinary = function (t, e) {
            if (t = "undefined" == typeof t ? this.offset : t, e = "undefined" == typeof e ? this.limit : e, !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            if (t === e) return "";
            for (var r = [], i = []; e > t;) r.push(this.view.getUint8(t++)), 1024 <= r.length && (i.push(String.fromCharCode.apply(String, r)), r = []);
            return i.join("") + String.fromCharCode.apply(String, r)
        }, e.fromBinary = function (t, r, i) {
            if (!i && "string" != typeof t) throw TypeError("Illegal str: Not a string");
            for (var n = 0, f = t.length, o = new e(f, r, i); f > n;) {
                if (r = t.charCodeAt(n), !i && r > 255) throw RangeError("Illegal charCode at " + n + ": 0 <= " + r + " <= 255");
                o.view.setUint8(n++, r)
            }
            return o.limit = f, o
        }, f.toDebug = function (t) {
            for (var e, r = -1, i = this.buffer.byteLength, n = "", f = "", o = ""; i > r;) {
                if (-1 !== r && (e = this.view.getUint8(r), n = 16 > e ? n + ("0" + e.toString(16).toUpperCase()) : n + e.toString(16).toUpperCase(), t && (f += e > 32 && 127 > e ? String.fromCharCode(e) : ".")), ++r, t && r > 0 && 0 === r % 16 && r !== i) {
                    for (; 51 > n.length;) n += " ";
                    o += n + f + "\n", n = f = ""
                }
                n = r === this.offset && r === this.limit ? n + (r === this.markedOffset ? "!" : "|") : r === this.offset ? n + (r === this.markedOffset ? "[" : "<") : r === this.limit ? n + (r === this.markedOffset ? "]" : ">") : n + (r === this.markedOffset ? "'" : t || 0 !== r && r !== i ? " " : "")
            }
            if (t && " " !== n) {
                for (; 51 > n.length;) n += " ";
                o += n + f + "\n"
            }
            return t ? o : n
        }, e.fromDebug = function (t, r, i) {
            var n = t.length;
            r = new e((n + 1) / 3 | 0, r, i);
            for (var f, o = 0, s = 0, h = !1, a = !1, l = !1, u = !1, g = !1; n > o;) {
                switch (f = t.charAt(o++)) {
                    case "!":
                        if (!i) {
                            if (a || l || u) {
                                g = !0;
                                break
                            }
                            a = l = u = !0
                        }
                        r.offset = r.markedOffset = r.limit = s, h = !1;
                        break;
                    case "|":
                        if (!i) {
                            if (a || u) {
                                g = !0;
                                break
                            }
                            a = u = !0
                        }
                        r.offset = r.limit = s, h = !1;
                        break;
                    case "[":
                        if (!i) {
                            if (a || l) {
                                g = !0;
                                break
                            }
                            a = l = !0
                        }
                        r.offset = r.markedOffset = s, h = !1;
                        break;
                    case "<":
                        if (!i) {
                            if (a) {
                                g = !0;
                                break
                            }
                            a = !0
                        }
                        r.offset = s, h = !1;
                        break;
                    case "]":
                        if (!i) {
                            if (u || l) {
                                g = !0;
                                break
                            }
                            u = l = !0
                        }
                        r.limit = r.markedOffset = s, h = !1;
                        break;
                    case ">":
                        if (!i) {
                            if (u) {
                                g = !0;
                                break
                            }
                            u = !0
                        }
                        r.limit = s, h = !1;
                        break;
                    case "'":
                        if (!i) {
                            if (l) {
                                g = !0;
                                break
                            }
                            l = !0
                        }
                        r.markedOffset = s, h = !1;
                        break;
                    case " ":
                        h = !1;
                        break;
                    default:
                        if (!i && h) {
                            g = !0;
                            break
                        }
                        if (f = parseInt(f + t.charAt(o++), 16), !i && (isNaN(f) || 0 > f || f > 255)) throw TypeError("Illegal str: Not a debug encoded string");
                        r.view.setUint8(s++, f), h = !0
                }
                if (g) throw TypeError("Illegal str: Invalid symbol at " + o)
            }
            if (!i) {
                if (!a || !u) throw TypeError("Illegal str: Missing offset or limit");
                if (s < r.buffer.byteLength) throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + s + " < " + n)
            }
            return r
        }, f.toHex = function (t, e) {
            if (t = "undefined" == typeof t ? this.offset : t, e = "undefined" == typeof e ? this.limit : e, !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            for (var r, i = Array(e - t); e > t;) r = this.view.getUint8(t++), 16 > r ? i.push("0", r.toString(16)) : i.push(r.toString(16));
            return i.join("")
        }, e.fromHex = function (t, r, i) {
            if (!i) {
                if ("string" != typeof t) throw TypeError("Illegal str: Not a string");
                if (0 !== t.length % 2) throw TypeError("Illegal str: Length not a multiple of 2")
            }
            var n = t.length;
            r = new e(n / 2 | 0, r);
            for (var f, o = 0, s = 0; n > o; o += 2) {
                if (f = parseInt(t.substring(o, o + 2), 16), !i && (!isFinite(f) || 0 > f || f > 255)) throw TypeError("Illegal str: Contains non-hex characters");
                r.view.setUint8(s++, f)
            }
            return r.limit = s, r
        };
        var a = function () {
            var t = {
                k: 1114111,
                j: function (t, e) {
                    var r = null;
                    for ("number" == typeof t && (r = t, t = function () {
                            return null
                        }); null !== r || null !== (r = t());) 128 > r ? e(127 & r) : (2048 > r ? e(r >> 6 & 31 | 192) : (65536 > r ? e(r >> 12 & 15 | 224) : (e(r >> 18 & 7 | 240), e(r >> 12 & 63 | 128)), e(r >> 6 & 63 | 128)), e(63 & r | 128)), r = null
                },
                g: function (t, e) {
                    function r(t) {
                        t = t.slice(0, t.indexOf(null));
                        var e = Error(t.toString());
                        throw e.name = "TruncatedError", e.bytes = t, e
                    }
                    for (var i, n, f, o; null !== (i = t());)
                        if (0 === (128 & i)) e(i);
                        else if (192 === (224 & i)) null === (n = t()) && r([i, n]), e((31 & i) << 6 | 63 & n);
                    else if (224 === (240 & i)) null !== (n = t()) && null !== (f = t()) || r([i, n, f]), e((15 & i) << 12 | (63 & n) << 6 | 63 & f);
                    else {
                        if (240 !== (248 & i)) throw RangeError("Illegal starting byte: " + i);
                        null !== (n = t()) && null !== (f = t()) && null !== (o = t()) || r([i, n, f, o]), e((7 & i) << 18 | (63 & n) << 12 | (63 & f) << 6 | 63 & o)
                    }
                },
                d: function (t, e) {
                    for (var r, i = null; null !== (r = null !== i ? i : t());) r >= 55296 && 57343 >= r && null !== (i = t()) && i >= 56320 && 57343 >= i ? (e(1024 * (r - 55296) + i - 56320 + 65536), i = null) : e(r);
                    null !== i && e(i)
                },
                e: function (t, e) {
                    var r = null;
                    for ("number" == typeof t && (r = t, t = function () {
                            return null
                        }); null !== r || null !== (r = t());) 65535 >= r ? e(r) : (r -= 65536, e((r >> 10) + 55296), e(r % 1024 + 56320)), r = null
                },
                c: function (e, r) {
                    t.d(e, function (e) {
                        t.j(e, r)
                    })
                },
                b: function (e, r) {
                    t.g(e, function (e) {
                        t.e(e, r)
                    })
                },
                f: function (t) {
                    return 128 > t ? 1 : 2048 > t ? 2 : 65536 > t ? 3 : 4
                },
                l: function (e) {
                    for (var r, i = 0; null !== (r = e());) i += t.f(r);
                    return i
                },
                a: function (e) {
                    var r = 0,
                        i = 0;
                    return t.d(e, function (e) {
                        ++r, i += t.f(e)
                    }), [r, i]
                }
            };
            return t
        }();
        return f.toUTF8 = function (t, e) {
            if ("undefined" == typeof t && (t = this.offset), "undefined" == typeof e && (e = this.limit), !this.noAssert) {
                if ("number" != typeof t || 0 !== t % 1) throw TypeError("Illegal begin: Not an integer");
                if (t >>>= 0, "number" != typeof e || 0 !== e % 1) throw TypeError("Illegal end: Not an integer");
                if (e >>>= 0, 0 > t || t > e || e > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + t + " <= " + e + " <= " + this.buffer.byteLength)
            }
            var r;
            try {
                a.b(function () {
                    return e > t ? this.view.getUint8(t++) : null
                }.bind(this), r = n())
            } catch (i) {
                if (t !== e) throw RangeError("Illegal range: Truncated data, " + t + " != " + e)
            }
            return r()
        }, e.fromUTF8 = function (t, i, n) {
            if (!n && "string" != typeof t) throw TypeError("Illegal str: Not a string");
            var f = new e(a.a(r(t), !0)[1], i, n),
                o = 0;
            return a.c(r(t), function (t) {
                f.view.setUint8(o++, t)
            }), f.limit = o, f
        }, e
    }
    window.ByteBuffer = e(window.Long)
}(this);