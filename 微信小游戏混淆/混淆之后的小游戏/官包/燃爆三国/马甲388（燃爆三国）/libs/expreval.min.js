! function(t, e) {
      t.exprEval = e()
}(window, function() {
    "use strict";
    function t(t, e) {
        this.type = t, this.value = void 0 !== e && null !== e ? e : 0
    }
    function e(e) {
        return new t(X, e)
    }
    function s(e) {
        return new t(z, e)
    }
    function r(e) {
        return new t(D, e)
    }
    function n(t, e) {
        for (var s, r, o, a, h = [], p = 0; p < t.length; p++) {
            var u = t[p],
                c = u.type;
            if (c === V) "number" == typeof u.value && u.value < 0 ? h.push("(" + u.value + ")") : h.push(i(u.value));
            else if (c === z) r = h.pop(), s = h.pop(), a = u.value, e ? "^" === a ? h.push("Math.pow(" + s + ", " + r + ")") : "and" === a ? h.push("(!!" + s + " && !!" + r + ")") : "or" === a ? h.push("(!!" + s + " || !!" + r + ")") : "||" === a ? h.push("(String(" + s + ") + String(" + r + "))") : "==" === a ? h.push("(" + s + " === " + r + ")") : "!=" === a ? h.push("(" + s + " !== " + r + ")") : h.push("(" + s + " " + a + " " + r + ")") : h.push("(" + s + " " + a + " " + r + ")");
            else if (c === D) {
                if (o = h.pop(), r = h.pop(), s = h.pop(), "?" !== (a = u.value)) throw new Error("invalid Expression");
                h.push("(" + s + " ? " + r + " : " + o + ")")
            } else if (c === H) h.push(u.value);
            else if (c === X) s = h.pop(), "-" === (a = u.value) || "+" === a ? h.push("(" + a + s + ")") : e ? "not" === a ? h.push("(!" + s + ")") : "!" === a ? h.push("fac(" + s + ")") : h.push(a + "(" + s + ")") : "!" === a ? h.push("(" + s + "!)") : h.push("(" + a + " " + s + ")");
            else if (c === K) {
                for (var l = u.value, f = []; l-- > 0;) f.unshift(h.pop());
                a = h.pop(), h.push(a + "(" + f.join(", ") + ")")
            } else if (c === Y) s = h.pop(), h.push(s + "." + u.value);
            else {
                if (c !== Q) throw new Error("invalid Expression");
                h.push("(" + n(u.value, e) + ")")
            }
        }
        if (h.length > 1) throw new Error("invalid Expression (parity)");
        return String(h[0])
    }
    function i(t) {
        return "string" == typeof t ? JSON.stringify(t).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") : t
    }
    function o(t, e) {
        for (var s = 0; s < t.length; s++) if (t[s] === e) return !0;
        return !1
    }
    function a(t, e, s) {
        for (var r = !! (s = s || {}).withMembers, n = null, i = 0; i < t.length; i++) {
            var h = t[i];
            h.type !== H || o(e, h.value) ? h.type === Y && r && null !== n ? n += "." + h.value : h.type === Q ? a(h.value, e, s) : null !== n && (o(e, n) || e.push(n), n = null) : r ? null !== n ? (o(e, n) || e.push(n), n = h.value) : n = h.value : e.push(h.value)
        }
        null === n || o(e, n) || e.push(n)
    }
    function h(t, e) {
        this.tokens = t, this.parser = e, this.unaryOps = e.unaryOps, this.binaryOps = e.binaryOps, this.ternaryOps = e.ternaryOps, this.functions = e.functions
    }
    function p(t, e, s) {
        this.type = t, this.value = e, this.index = s
    }
    function u(t, e) {
        this.pos = 0, this.current = null, this.unaryOps = t.unaryOps, this.binaryOps = t.binaryOps, this.ternaryOps = t.ternaryOps, this.consts = t.consts, this.expression = e, this.savedPosition = 0, this.savedCurrent = null, this.options = t.options
    }
    function c(t, e, s) {
        this.parser = t, this.tokens = e, this.current = null, this.nextToken = null, this.next(), this.savedCurrent = null, this.savedNextToken = null, this.allowMemberAccess = !1 !== s.allowMemberAccess
    }
    function l(t, e) {
        return Number(t) + Number(e)
    }
    function f(t, e) {
        return t - e
    }
    function v(t, e) {
        return t * e
    }
    function x(t, e) {
        return t / e
    }
    function y(t, e) {
        return t % e
    }
    function w(t, e) {
        return "" + t + e
    }
    function M(t, e) {
        return t === e
    }
    function g(t, e) {
        return t !== e
    }
    function d(t, e) {
        return t > e
    }
    function E(t, e) {
        return e > t
    }
    function k(t, e) {
        return t >= e
    }
    function b(t, e) {
        return e >= t
    }
    function m(t, e) {
        return Boolean(t && e)
    }
    function T(t, e) {
        return Boolean(t || e)
    }
    function A(t, e) {
        return o(e, t)
    }
    function O(t) {
        return (Math.exp(t) - Math.exp(-t)) / 2
    }
    function N(t) {
        return (Math.exp(t) + Math.exp(-t)) / 2
    }
    function C(t) {
        return t === 1 / 0 ? 1 : t === -1 / 0 ? -1 : (Math.exp(t) - Math.exp(-t)) / (Math.exp(t) + Math.exp(-t))
    }
    function P(t) {
        return t === -1 / 0 ? t : Math.log(t + Math.sqrt(t * t + 1))
    }
    function I(t) {
        return Math.log(t + Math.sqrt(t * t - 1))
    }
    function S(t) {
        return Math.log((1 + t) / (1 - t)) / 2
    }
    function R(t) {
        return Math.log(t) * Math.LOG10E
    }
    function F(t) {
        return -t
    }
    function L(t) {
        return !t
    }
    function U(t) {
        return 0 > t ? Math.ceil(t) : Math.floor(t)
    }
    function q(t) {
        return Math.random() * (t || 1)
    }
    function B(t) {
        return _(t + 1)
    }
    function _(t) {
        var e, s;
        if (function(t) {
            return isFinite(t) && t === Math.round(t)
        }(t)) {
            if (0 >= t) return isFinite(t) ? 1 / 0 : NaN;
            if (t > 171) return 1 / 0;
            for (var r = t - 2, n = t - 1; r > 1;) n *= r, r--;
            return 0 === n && (n = 1), n
        }
        if (.5 > t) return Math.PI / (Math.sin(Math.PI * t) * _(1 - t));
        if (t >= 171.35) return 1 / 0;
        if (t > 85) {
            var i = t * t,
                o = i * t,
                a = o * t,
                h = a * t;
            return Math.sqrt(2 * Math.PI / t) * Math.pow(t / Math.E, t) * (1 + 1 / (12 * t) + 1 / (288 * i) - 139 / (51840 * o) - 571 / (2488320 * a) + 163879 / (209018880 * h) + 5246819 / (75246796800 * h * t))
        }--t, s = ot[0];
        for (var p = 1; p < ot.length; ++p) s += ot[p] / (t + p);
        return e = t + it + .5, Math.sqrt(2 * Math.PI) * Math.pow(e, t + .5) * Math.exp(-e) * s
    }
    function $(t) {
        return String(t).length
    }
    function G() {
        for (var t = 0, e = 0, s = 0; s < arguments.length; s++) {
            var r, n = Math.abs(arguments[s]);
            n > e ? (t = t * (r = e / n) * r + 1, e = n) : t += n > 0 ? (r = n / e) * r : n
        }
        return e === 1 / 0 ? 1 / 0 : e * Math.sqrt(t)
    }
    function J(t, e, s) {
        return t ? e : s
    }
    function W(t, e) {
        return void 0 === e || 0 == +e ? Math.round(t) : (t = +t, e = -+e, isNaN(t) || "number" != typeof e || e % 1 != 0 ? NaN : (t = t.toString().split("e"), +((t = (t = Math.round(+(t[0] + "e" + (t[1] ? +t[1] - e : -e)))).toString().split("e"))[0] + "e" + (t[1] ? +t[1] + e : e))))
    }
    function j(t) {
        this.options = t || {}, this.unaryOps = {
            sin: Math.sin,
            cos: Math.cos,
            tan: Math.tan,
            asin: Math.asin,
            acos: Math.acos,
            atan: Math.atan,
            sinh: Math.sinh || O,
            cosh: Math.cosh || N,
            tanh: Math.tanh || C,
            asinh: Math.asinh || P,
            acosh: Math.acosh || I,
            atanh: Math.atanh || S,
            sqrt: Math.sqrt,
            log: Math.log,
            ln: Math.log,
            lg: Math.log10 || R,
            log10: Math.log10 || R,
            abs: Math.abs,
            ceil: Math.ceil,
            floor: Math.floor,
            round: Math.round,
            trunc: Math.trunc || U,
            "-": F,
            "+": Number,
            exp: Math.exp,
            not: L,
            length: $,
            "!": B
        }, this.binaryOps = {
            "+": l,
            "-": f,
            "*": v,
            "/": x,
            "%": y,
            "^": Math.pow,
            "||": w,
            "==": M,
            "!=": g,
            ">": d,
            "<": E,
            ">=": k,
            "<=": b,
            and: m,
            or: T,
            "in": A
        }, this.ternaryOps = {
            "?": J
        }, this.functions = {
            random: q,
            fac: B,
            min: Math.min,
            max: Math.max,
            hypot: Math.hypot || G,
            pyt: Math.hypot || G,
            pow: Math.pow,
            atan2: Math.atan2,
            "if": J,
            gamma: _,
            roundTo: W
        }, this.consts = {
            E: Math.E,
            PI: Math.PI,
            "true": !0,
            "false": !1
        }
    }
    var V = "INUMBER",
        X = "IOP1",
        z = "IOP2",
        D = "IOP3",
        H = "IVAR",
        K = "IFUNCALL",
        Q = "IEXPR",
        Y = "IMEMBER";
    t.prototype.toString = function() {
        switch (this.type) {
            case V:
            case X:
            case z:
            case D:
            case H:
                return this.value;
            case K:
                return "CALL " + this.value;
            case Y:
                return "." + this.value;
            default:
                return "Invalid Instruction"
        }
    }, h.prototype.simplify = function(e) {
        return e = e || {}, new h(function s(e, r, n, i, o) {
            for (var a, h, p, u, c = [], l = [], f = 0; f < e.length; f++) {
                var v = e[f],
                    x = v.type;
                if (x === V) c.push(v);
                else if (x === H && o.hasOwnProperty(v.value)) v = new t(V, o[v.value]), c.push(v);
                else if (x === z && c.length > 1) h = c.pop(), a = c.pop(), u = n[v.value], v = new t(V, u(a.value, h.value)), c.push(v);
                else if (x === D && c.length > 2) p = c.pop(), h = c.pop(), a = c.pop(), "?" === v.value ? c.push(a.value ? h.value : p.value) : (u = i[v.value], v = new t(V, u(a.value, h.value, p.value)), c.push(v));
                else if (x === X && c.length > 0) a = c.pop(), u = r[v.value], v = new t(V, u(a.value)), c.push(v);
                else if (x === Q) {
                    for (; c.length > 0;) l.push(c.shift());
                    l.push(new t(Q, s(v.value, r, n, i, o)))
                } else if (x === Y && c.length > 0) a = c.pop(), c.push(new t(V, a.value[v.value]));
                else {
                    for (; c.length > 0;) l.push(c.shift());
                    l.push(v)
                }
            }
            for (; c.length > 0;) l.push(c.shift());
            return l
        }(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, e), this.parser)
    }, h.prototype.substitute = function(n, i) {
        return i instanceof h || (i = this.parser.parse(String(i))), new h(function o(n, i, a) {
            for (var h = [], p = 0; p < n.length; p++) {
                var u = n[p],
                    c = u.type;
                if (c === H && u.value === i) for (var l = 0; l < a.tokens.length; l++) {
                    var f, v = a.tokens[l];
                    f = v.type === X ? e(v.value) : v.type === z ? s(v.value) : v.type === D ? r(v.value) : new t(v.type, v.value), h.push(f)
                } else c === Q ? h.push(new t(Q, o(u.value, i, a))) : h.push(u)
            }
            return h
        }(this.tokens, n, i), this.parser)
    }, h.prototype.evaluate = function(t) {
        return t = t || {},
        function e(t, s, r) {
            for (var n, i, o, a, h = [], p = 0; p < t.length; p++) {
                var u = t[p],
                    c = u.type;
                if (c === V) h.push(u.value);
                else if (c === z) i = h.pop(), n = h.pop(), "and" === u.value ? h.push( !! n && !! e(i, s, r)) : "or" === u.value ? h.push( !! n || !! e(i, s, r)) : (a = s.binaryOps[u.value], h.push(a(n, i)));
                else if (c === D) o = h.pop(), i = h.pop(), n = h.pop(), "?" === u.value ? h.push(e(n ? i : o, s, r)) : (a = s.ternaryOps[u.value], h.push(a(n, i, o)));
                else if (c === H) if (u.value in s.functions) h.push(s.functions[u.value]);
                else {
                    var l = r[u.value];
                    if (void 0 === l) throw new Error("undefined variable: " + u.value);
                    h.push(l)
                } else if (c === X) n = h.pop(), a = s.unaryOps[u.value], h.push(a(n));
                else if (c === K) {
                    for (var f = u.value, v = []; f-- > 0;) v.unshift(h.pop());
                    if (!(a = h.pop()).apply || !a.call) throw new Error(a + " is not a function");
                    h.push(a.apply(void 0, v))
                } else if (c === Q) h.push(u.value);
                else {
                    if (c !== Y) throw new Error("invalid Expression");
                    n = h.pop(), h.push(n[u.value])
                }
            }
            if (h.length > 1) throw new Error("invalid Expression (parity)");
            return h[0]
        }(this.tokens, this, t)
    }, h.prototype.toString = function() {
        return n(this.tokens, !1)
    }, h.prototype.symbols = function(t) {
        t = t || {};
        var e = [];
        return a(this.tokens, e, t), e
    }, h.prototype.variables = function(t) {
        t = t || {};
        var e = [];
        a(this.tokens, e, t);
        var s = this.functions;
        return e.filter(function(t) {
            return !(t in s)
        })
    }, h.prototype.toJSFunction = function(t, e) {
        var s = this,
            r = new Function(t, "with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return " + n(this.simplify(e).tokens, !0) + "; }");
        return function() {
            return r.apply(s, arguments)
        }
    };
    var Z = "TOP";
    p.prototype.toString = function() {
        return this.type + ": " + this.value
    }, u.prototype.newToken = function(t, e, s) {
        return new p(t, e, null != s ? s : this.pos)
    }, u.prototype.save = function() {
        this.savedPosition = this.pos, this.savedCurrent = this.current
    }, u.prototype.restore = function() {
        this.pos = this.savedPosition, this.current = this.savedCurrent
    }, u.prototype.next = function() {
        return this.pos >= this.expression.length ? this.newToken("TEOF", "EOF") : this.isWhitespace() || this.isComment() ? this.next() : this.isRadixInteger() || this.isNumber() || this.isOperator() || this.isString() || this.isParen() || this.isComma() || this.isNamedOp() || this.isConst() || this.isName() ? this.current : void this.parseError('Unknown character "' + this.expression.charAt(this.pos) + '"')
    }, u.prototype.isString = function() {
        var t = !1,
            e = this.pos,
            s = this.expression.charAt(e);
        if ("'" === s || '"' === s) for (var r = this.expression.indexOf(s, e + 1); r >= 0 && this.pos < this.expression.length;) {
            if (this.pos = r + 1, "\\" !== this.expression.charAt(r - 1)) {
                var n = this.expression.substring(e + 1, r);
                this.current = this.newToken("TSTRING", this.unescape(n), e), t = !0;
                break
            }
            r = this.expression.indexOf(s, r + 1)
        }
        return t
    }, u.prototype.isParen = function() {
        var t = this.expression.charAt(this.pos);
        return ("(" === t || ")" === t) && (this.current = this.newToken("TPAREN", t), this.pos++, !0)
    }, u.prototype.isComma = function() {
        return "," === this.expression.charAt(this.pos) && (this.current = this.newToken("TCOMMA", ","), this.pos++, !0)
    }, u.prototype.isConst = function() {
        for (var t = this.pos, e = t; e < this.expression.length; e++) {
            var s = this.expression.charAt(e);
            if (s.toUpperCase() === s.toLowerCase() && (e === this.pos || "_" !== s && "." !== s && ("0" > s || s > "9"))) break
        }
        if (e > t) {
            var r = this.expression.substring(t, e);
            if (r in this.consts) return this.current = this.newToken("TNUMBER", this.consts[r]), this.pos += r.length, !0
        }
        return !1
    }, u.prototype.isNamedOp = function() {
        for (var t = this.pos, e = t; e < this.expression.length; e++) {
            var s = this.expression.charAt(e);
            if (s.toUpperCase() === s.toLowerCase() && (e === this.pos || "_" !== s && ("0" > s || s > "9"))) break
        }
        if (e > t) {
            var r = this.expression.substring(t, e);
            if (this.isOperatorEnabled(r) && (r in this.binaryOps || r in this.unaryOps || r in this.ternaryOps)) return this.current = this.newToken(Z, r), this.pos += r.length, !0
        }
        return !1
    }, u.prototype.isName = function() {
        for (var t = this.pos, e = t, s = !1; e < this.expression.length; e++) {
            var r = this.expression.charAt(e);
            if (r.toUpperCase() === r.toLowerCase()) {
                if (e === this.pos && ("$" === r || "_" === r)) {
                    "_" === r && (s = !0);
                    continue
                }
                if (e === this.pos || !s || "_" !== r && ("0" > r || r > "9")) break
            } else s = !0
        }
        if (s) {
            var n = this.expression.substring(t, e);
            return this.current = this.newToken("TNAME", n), this.pos += n.length, !0
        }
        return !1
    }, u.prototype.isWhitespace = function() {
        for (var t = !1, e = this.expression.charAt(this.pos); !(" " !== e && "	" !== e && "\n" !== e && "\r" !== e || (t = !0, this.pos++, this.pos >= this.expression.length));) e = this.expression.charAt(this.pos);
        return t
    };
    var tt = /^[0-9a-f]{4}$/i;
    u.prototype.unescape = function(t) {
        var e = t.indexOf("\\");
        if (0 > e) return t;
        for (var s = t.substring(0, e); e >= 0;) {
            var r = t.charAt(++e);
            switch (r) {
                case "'":
                    s += "'";
                    break;
                case '"':
                    s += '"';
                    break;
                case "\\":
                    s += "\\";
                    break;
                case "/":
                    s += "/";
                    break;
                case "b":
                    s += "\b";
                    break;
                case "f":
                    s += "\f";
                    break;
                case "n":
                    s += "\n";
                    break;
                case "r":
                    s += "\r";
                    break;
                case "t":
                    s += "	";
                    break;
                case "u":
                    var n = t.substring(e + 1, e + 5);
                    tt.test(n) || this.parseError("Illegal escape sequence: \\u" + n), s += String.fromCharCode(parseInt(n, 16)), e += 4;
                    break;
                default:
                    throw this.parseError('Illegal escape sequence: "\\' + r + '"')
            }++e;
            var i = t.indexOf("\\", e);
            s += t.substring(e, 0 > i ? t.length : i), e = i
        }
        return s
    }, u.prototype.isComment = function() {
        return "/" === this.expression.charAt(this.pos) && "*" === this.expression.charAt(this.pos + 1) && (this.pos = this.expression.indexOf("*/", this.pos) + 2, 1 === this.pos && (this.pos = this.expression.length), !0)
    }, u.prototype.isRadixInteger = function() {
        var t, e, s = this.pos;
        if (s >= this.expression.length - 2 || "0" !== this.expression.charAt(s)) return !1;
        if (++s, "x" === this.expression.charAt(s)) t = 16, e = /^[0-9a-f]$/i, ++s;
        else {
            if ("b" !== this.expression.charAt(s)) return !1;
            t = 2, e = /^[01]$/i, ++s
        }
        for (var r = !1, n = s; s < this.expression.length;) {
            var i = this.expression.charAt(s);
            if (!e.test(i)) break;
            s++, r = !0
        }
        return r && (this.current = this.newToken("TNUMBER", parseInt(this.expression.substring(n, s), t)), this.pos = s), r
    }, u.prototype.isNumber = function() {
        for (var t, e = !1, s = this.pos, r = s, n = s, i = !1, o = !1; s < this.expression.length && ((t = this.expression.charAt(s)) >= "0" && "9" >= t || !i && "." === t);) "." === t ? i = !0 : o = !0, s++, e = o;
        if (e && (n = s), "e" === t || "E" === t) {
            s++;
            for (var a = !0, h = !1; s < this.expression.length;) {
                if (t = this.expression.charAt(s), !a || "+" !== t && "-" !== t) {
                    if (!(t >= "0" && "9" >= t)) break;
                    h = !0, a = !1
                } else a = !1;
                s++
            }
            h || (s = n)
        }
        return e ? (this.current = this.newToken("TNUMBER", parseFloat(this.expression.substring(r, s))), this.pos = s) : this.pos = n, e
    }, u.prototype.isOperator = function() {
        var t = this.pos,
            e = this.expression.charAt(this.pos);
        if ("+" === e || "-" === e || "*" === e || "/" === e || "%" === e || "^" === e || "?" === e || ":" === e || "." === e) this.current = this.newToken(Z, e);
        else if ("∙" === e || "•" === e) this.current = this.newToken(Z, "*");
        else if (">" === e) "=" === this.expression.charAt(this.pos + 1) ? (this.current = this.newToken(Z, ">="), this.pos++) : this.current = this.newToken(Z, ">");
        else if ("<" === e) "=" === this.expression.charAt(this.pos + 1) ? (this.current = this.newToken(Z, "<="), this.pos++) : this.current = this.newToken(Z, "<");
        else if ("|" === e) {
            if ("|" !== this.expression.charAt(this.pos + 1)) return !1;
            this.current = this.newToken(Z, "||"), this.pos++
        } else if ("=" === e) {
            if ("=" !== this.expression.charAt(this.pos + 1)) return !1;
            this.current = this.newToken(Z, "=="), this.pos++
        } else {
            if ("!" !== e) return !1;
            "=" === this.expression.charAt(this.pos + 1) ? (this.current = this.newToken(Z, "!="), this.pos++) : this.current = this.newToken(Z, e)
        }
        return this.pos++, !! this.isOperatorEnabled(this.current.value) || (this.pos = t, !1)
    };
    var et = {
        "+": "add",
        "-": "subtract",
        "*": "multiply",
        "/": "divide",
        "%": "remainder",
        "^": "power",
        "!": "factorial",
        "<": "comparison",
        ">": "comparison",
        "<=": "comparison",
        ">=": "comparison",
        "==": "comparison",
        "!=": "comparison",
        "||": "concatenate",
        and: "logical",
        or: "logical",
        not: "logical",
        "?": "conditional",
        ":": "conditional"
    };
    u.prototype.isOperatorEnabled = function(t) {
        var e = function(t) {
            return et.hasOwnProperty(t) ? et[t] : t
        }(t),
            s = this.options.operators || {};
        return "in" === e ? !! s["in"] : !(e in s && !s[e])
    }, u.prototype.getCoordinates = function() {
        var t, e = 0,
            s = -1;
        do e++, t = this.pos - s, s = this.expression.indexOf("\n", s + 1);
        while (s >= 0 && s < this.pos);
        return {
            line: e,
            column: t
        }
    }, u.prototype.parseError = function(t) {
        var e = this.getCoordinates();
        throw new Error("parse error [" + e.line + ":" + e.column + "]: " + t)
    }, c.prototype.next = function() {
        return this.current = this.nextToken, this.nextToken = this.tokens.next()
    }, c.prototype.tokenMatches = function(t, e) {
        return void 0 === e || (Array.isArray(e) ? o(e, t.value) : "function" == typeof e ? e(t) : t.value === e)
    }, c.prototype.save = function() {
        this.savedCurrent = this.current, this.savedNextToken = this.nextToken, this.tokens.save()
    }, c.prototype.restore = function() {
        this.tokens.restore(), this.current = this.savedCurrent, this.nextToken = this.savedNextToken
    }, c.prototype.accept = function(t, e) {
        return !(this.nextToken.type !== t || !this.tokenMatches(this.nextToken, e) || (this.next(), 0))
    }, c.prototype.expect = function(t, e) {
        if (!this.accept(t, e)) {
            var s = this.tokens.getCoordinates();
            throw new Error("parse error [" + s.line + ":" + s.column + "]: Expected " + (e || t))
        }
    }, c.prototype.parseAtom = function(e) {
        if (this.accept("TNAME")) e.push(new t(H, this.current.value));
        else if (this.accept("TNUMBER")) e.push(new t(V, this.current.value));
        else if (this.accept("TSTRING")) e.push(new t(V, this.current.value));
        else {
            if (!this.accept("TPAREN", "(")) throw new Error("unexpected " + this.nextToken);
            this.parseExpression(e), this.expect("TPAREN", ")")
        }
    }, c.prototype.parseExpression = function(t) {
        this.parseConditionalExpression(t)
    }, c.prototype.parseConditionalExpression = function(e) {
        for (this.parseOrExpression(e); this.accept(Z, "?");) {
            var s = [],
                n = [];
            this.parseConditionalExpression(s), this.expect(Z, ":"), this.parseConditionalExpression(n), e.push(new t(Q, s)), e.push(new t(Q, n)), e.push(r("?"))
        }
    }, c.prototype.parseOrExpression = function(e) {
        for (this.parseAndExpression(e); this.accept(Z, "or");) {
            var r = [];
            this.parseAndExpression(r), e.push(new t(Q, r)), e.push(s("or"))
        }
    }, c.prototype.parseAndExpression = function(e) {
        for (this.parseComparison(e); this.accept(Z, "and");) {
            var r = [];
            this.parseComparison(r), e.push(new t(Q, r)), e.push(s("and"))
        }
    };
    var st = ["==", "!=", "<", "<=", ">=", ">", "in"];
    c.prototype.parseComparison = function(t) {
        for (this.parseAddSub(t); this.accept(Z, st);) {
            var e = this.current;
            this.parseAddSub(t), t.push(s(e.value))
        }
    };
    var rt = ["+", "-", "||"];
    c.prototype.parseAddSub = function(t) {
        for (this.parseTerm(t); this.accept(Z, rt);) {
            var e = this.current;
            this.parseTerm(t), t.push(s(e.value))
        }
    };
    var nt = ["*", "/", "%"];
    c.prototype.parseTerm = function(t) {
        for (this.parseFactor(t); this.accept(Z, nt);) {
            var e = this.current;
            this.parseFactor(t), t.push(s(e.value))
        }
    }, c.prototype.parseFactor = function(t) {
        var s = this.tokens.unaryOps;
        if (this.save(), this.accept(Z, function(t) {
            return t.value in s
        })) if ("-" !== this.current.value && "+" !== this.current.value && "TPAREN" === this.nextToken.type && "(" === this.nextToken.value) this.restore(), this.parseExponential(t);
        else {
            var r = this.current;
            this.parseFactor(t), t.push(e(r.value))
        } else this.parseExponential(t)
    }, c.prototype.parseExponential = function(t) {
        for (this.parsePostfixExpression(t); this.accept(Z, "^");) this.parseFactor(t), t.push(s("^"))
    }, c.prototype.parsePostfixExpression = function(t) {
        for (this.parseFunctionCall(t); this.accept(Z, "!");) t.push(e("!"))
    }, c.prototype.parseFunctionCall = function(s) {
        var r = this.tokens.unaryOps;
        if (this.accept(Z, function(t) {
            return t.value in r
        })) {
            var n = this.current;
            this.parseAtom(s), s.push(e(n.value))
        } else for (this.parseMemberExpression(s); this.accept("TPAREN", "(");) if (this.accept("TPAREN", ")")) s.push(new t(K, 0));
        else {
            var i = this.parseArgumentList(s);
            s.push(new t(K, i))
        }
    }, c.prototype.parseArgumentList = function(t) {
        for (var e = 0; !this.accept("TPAREN", ")");) for (this.parseExpression(t), ++e; this.accept("TCOMMA");) this.parseExpression(t), ++e;
        return e
    }, c.prototype.parseMemberExpression = function(e) {
        for (this.parseAtom(e); this.accept(Z, ".");) {
            if (!this.allowMemberAccess) throw new Error('unexpected ".", member access is not permitted');
            this.expect("TNAME"), e.push(new t(Y, this.current.value))
        }
    };
    var it = 4.7421875,
        ot = [.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -.4919138160976202, 3399464998481189e-20, 4652362892704858e-20, -9837447530487956e-20, .0001580887032249125, -.00021026444172410488, .00021743961811521265, -.0001643181065367639, 8441822398385275e-20, -26190838401581408e-21, 36899182659531625e-22];
    j.prototype.parse = function(t) {
        var e = [],
            s = new c(this, new u(this, t), {
                allowMemberAccess: this.options.allowMemberAccess
            });
        return s.parseExpression(e), s.expect("TEOF", "EOF"), new h(e, this)
    }, j.prototype.evaluate = function(t, e) {
        return this.parse(t).evaluate(e)
    };
    var at = new j;
    return j.parse = function(t) {
        return at.parse(t)
    }, j.evaluate = function(t, e) {
        return at.parse(t).evaluate(e)
    }, {
        Parser: j,
        Expression: h
    }
});